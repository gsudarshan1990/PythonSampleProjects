name: Multi-Folder Python CI/CD

# Trigger the workflow on push and pull requests
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort pylint
    - name: Check code with pylint
      run: |
        pylint --exit-zero --output-format=text . --ignore=venv,env,.venv,.env || echo "Pylint completed with issues"
      continue-on-error: true
      run: |
        black --check --diff . || echo "Code formatting issues found (not blocking)"
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || echo "Import sorting issues found (not blocking)"
      continue-on-error: true

  # Job 2: Test Discovery and Execution
  test-discovery:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install common testing and analysis tools
        pip install pytest pytest-cov coverage unittest-xml-reporting
        
        # Install project dependencies if they exist
        if [ -f requirements.txt ]; then 
          pip install -r requirements.txt
        fi
        
        # Look for other requirement files
        find . -name "requirements*.txt" -not -path "./venv/*" -not -path "./.venv/*" | while read req_file; do
          echo "Installing from $req_file"
          pip install -r "$req_file" || echo "Could not install from $req_file"
        done
        
        # Install common Python packages that might be needed
        pip install requests numpy pandas matplotlib seaborn scikit-learn flask django fastapi || echo "Some optional packages failed to install"
    
    - name: Discover Python project structure
      run: |
        echo "=== Repository Structure ==="
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | head -20
        
        echo -e "\n=== Folders with Python files ==="
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | xargs dirname | sort | uniq
        
        echo -e "\n=== Test files found ==="
        find . -name "test_*.py" -o -name "*_test.py" -o -name "tests.py" | grep -v venv
        
        echo -e "\n=== Main Python files ==="
        find . -name "main.py" -o -name "app.py" -o -name "run.py" -o -name "__main__.py" | grep -v venv

  # Job 3: Run Unit Tests
  run-tests:
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        python-version: [3.9, '3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov coverage
        
        # Install requirements if available
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
        # Install common packages
        pip install requests numpy pandas || echo "Some packages failed"
    
    - name: Run all unit tests with pytest
      run: |
        echo "Running tests with pytest..."
        python -m pytest -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing --ignore=venv --ignore=.venv || echo "pytest completed with issues"
    
    - name: Run unittest discovery
      run: |
        echo "Running tests with unittest discovery..."
        python -m unittest discover -s . -p "test_*.py" -v 2>&1 || echo "unittest discovery completed with issues"
    
    - name: Run individual test files
      run: |
        echo "Running individual test files..."
        find . -name "test_*.py" -not -path "./venv/*" | while read test_file; do
          echo "=== Running $test_file ==="
          cd "$(dirname "$test_file")"
          python "$(basename "$test_file")" || echo "Failed: $test_file"
          cd - > /dev/null
        done

  # Job 4: Execute Main Scripts
  execute-scripts:
    runs-on: ubuntu-latest
    needs: [test-discovery]
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install requests numpy pandas matplotlib seaborn || echo "Some packages failed"
    
    - name: Execute main scripts (syntax check)
      run: |
        echo "=== Checking syntax of main scripts ==="
        find . -name "main.py" -o -name "app.py" -o -name "run.py" | while read main_file; do
          echo "Syntax checking: $main_file"
          python -m py_compile "$main_file" && echo "✓ $main_file syntax OK" || echo "✗ $main_file syntax error"
        done
    
    - name: Execute Python files in each folder (dry run)
      run: |
        echo "=== Dry run execution test ==="
        # Find all directories with Python files
        find . -name "*.py" -not -path "./venv/*" | xargs dirname | sort | uniq | while read dir; do
          if [ "$dir" != "." ]; then
            echo "=== Testing folder: $dir ==="
            cd "$dir"
            
            # Look for main files to execute
            for main_file in main.py app.py run.py __main__.py; do
              if [ -f "$main_file" ]; then
                echo "Found executable: $main_file"
                # Just check if it can import without executing
                python -c "
try:
    import ast
    with open('$main_file', 'r') as f:
        ast.parse(f.read())
    print('✓ $main_file is valid Python')
except Exception as e:
    print('✗ $main_file has issues:', e)
" || echo "Could not validate $main_file"
              fi
            done
            cd - > /dev/null
          fi
        done

  # Job 5: Generate Report
  generate-report:
    runs-on: ubuntu-latest
    needs: [code-quality, run-tests, execute-scripts]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate Project Report
      run: |
        echo "# Python Multi-Folder Repository CI/CD Report" > report.md
        echo "Generated on: $(date)" >> report.md
        echo "" >> report.md
        
        echo "## Repository Structure" >> report.md
        echo "\`\`\`" >> report.md
        find . -name "*.py" -not -path "./venv/*" | head -30 >> report.md
        echo "\`\`\`" >> report.md
        echo "" >> report.md
        
        echo "## Python Files Count by Folder" >> report.md
        find . -name "*.py" -not -path "./venv/*" | xargs dirname | sort | uniq -c >> report.md
        echo "" >> report.md
        
        echo "## Test Files Found" >> report.md
        find . -name "test_*.py" -o -name "*_test.py" >> report.md || echo "No test files found" >> report.md
        
        cat report.md
    
    - name: Upload report as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ci-report
        path: report.md
